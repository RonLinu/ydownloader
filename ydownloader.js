// Generated by CoffeeScript 2.7.0
var askConfirm, changeVideoFolder, getOS, languages, msg, resolutions, setOpenFolderClickHandler, showAlert, socket, socket_error, socket_send, timedAlert;

if (location.hash === '') {
  msg = 'This web application must be started with a web socket server.';
  document.body.innerHTML = msg;
}

showAlert = function(title, icon, msg, textalign = 'center') {
  return Swal.fire({
    title: title,
    html: `<div style='text-align: ${textalign}; font-size: 16px;'>${msg}</div>`,
    icon: icon,
    confirmButtonText: 'OK',
    position: 'center',
    animation: true
  });
};

// ********************** WEB SOCKET HANDLING **************************
socket = null;

(function() {
  var port;
  port = location.hash.split(",")[1];
  socket = new WebSocket(`ws://localhost:${port}/ws`);
  socket.onopen = function(event) {
    console.log('WebSocket connection established');
    // Enable the Download button
    return document.getElementById('download').disabled = false;
  };
  socket.onerror = function(event) {
    console.log('WebSocket error occurred');
    return document.body.innerHTML = `WebSocket error on port ${port}`;
  };
  socket.onclose = function(event) {
    console.log('WebSocket closed');
    return document.body.innerHTML = 'The application has been closed.';
  };
  return socket.onmessage = function(event) {
    if (event.data.indexOf('Error') > -1) {
      return socket_error(event.data);
    }
  };
})();


// --------------------------------------
socket_send = function(action, command, tag) {
  var cmd;
  cmd = JSON.stringify({
    id: location.hash, // use full fragment as identifier
    action: action,
    cmd: command,
    tag: tag
  });
  return socket.send(cmd);
};

// --------------------------------------
socket_error = function(error) {
  return showAlert('', 'error', error);
};


// ******************* END OF WEB SOCKET HANDLING **********************
window.addEventListener('beforeunload', function(event) {
  // Terminate the external socket server program
  return socket_send('exit', '', 'EXIT');
});

// --------------------------------------
window.onload = function() {
  // Conveniently focus on video URL field
  document.getElementById('videoUrl').focus();
  // Preset the video folder by detecting underlying OS
  //~ os = getOS()
  return changeVideoFolder(getOS());
};

// --------------------------------------
languages = {
  'Afrikaans': 'af',
  'Amharic': 'am',
  'Arabic': 'ar',
  'Basque': 'eu',
  'Bengali': 'bn',
  'Bulgarian': 'bg',
  'Catalan': 'ca',
  'Chinese': 'zh',
  'Croatian': 'hr',
  'Czech': 'cs',
  'Danish': 'da',
  'Dutch': 'nl',
  'English': 'en',
  'Esperanto': 'eo',
  'Estonian': 'et',
  'Filipino': 'fil',
  'Finnish': 'fi',
  'French': 'fr',
  'Galician': 'gl',
  'German': 'de',
  'Greek': 'el',
  'Hebrew': 'he',
  'Hindi': 'hi',
  'Hungarian': 'hu',
  'Icelandic': 'is',
  'Indonesian': 'id',
  'Irish': 'ga',
  'Italian': 'it',
  'Japanese': 'ja',
  'Korean': 'ko',
  'Latvian': 'lv',
  'Lithuanian': 'lt',
  'Malay': 'ms',
  'Norwegian': 'no',
  'Romanian': 'ro',
  'Russian': 'ru',
  'Serbian': 'sr',
  'Slovak': 'sk',
  'Slovenian': 'sl',
  'Spanish': 'es',
  'Swahili': 'sw',
  'Swedish': 'sv',
  'Tamil': 'ta',
  'Telugu': 'te',
  'Thai': 'th',
  'Turkish': 'tr',
  'Ukrainian': 'uk',
  'Vietnamese': 'vi',
  'Welsh': 'cy',
  'Xhosa': 'xh',
  'Zulu': 'zu'
};

resolutions = ['360p (LD)', '480p (SD)', '720p (HD)', '1080p (full HD)', '1440p (2K)', '2160p (4K)', 'No cap', 'Audio only'];

(function() {  // *********************************************************************
  var checkbox, container, label, language, results;
  // Create checkbox panel with all supported languages
  container = document.querySelector('.checkbox-grid');
  results = [];
  for (language in languages) {
    // Create a label element
    label = document.createElement('label');
    // Create the checkbox input element
    checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.name = 'language';
    checkbox.value = language;
    if (language === 'English') {
      checkbox.checked = true;
    }
    // Append the checkbox into the label
    label.appendChild(checkbox);
    // Add the label text node (for example "English")
    label.appendChild(document.createTextNode(language));
    // Append the label to the container
    results.push(container.appendChild(label));
  }
  return results;
})();

(function() {  // --------------------------------------
  var brTag, container, i, index, label, len, radio, resolution, results;
// Create radio button panel with all supported video resolutions
  results = [];
  for (index = i = 0, len = resolutions.length; i < len; index = ++i) {
    resolution = resolutions[index];
    // Select the fieldset container where radio buttons are grouped
    container = document.querySelector('.radio-section');
    // Create a radio button
    radio = document.createElement('input');
    radio.type = 'radio';
    radio.id = index; // unique id
    radio.name = 'resolutions'; // group name
    radio.value = resolution;
    if (resolution === '720p (HD)') {
      radio.checked = true;
    }
    // Create label element for the radio button
    label = document.createElement('label');
    label.setAttribute('for', resolution);
    label.textContent = resolution;
    // Append radio button and label to the container
    container.appendChild(radio);
    container.appendChild(label);
    // Add line break for layout
    brTag = document.createElement('br');
    results.push(container.appendChild(brTag));
  }
  return results;
})();

(function() {  // --------------------------------------
  var i, len, osButton, osButtons, osChange, results;
  // Run this event listener when user select an OS radio button
  osChange = function(event) {
    var selectedOS;
    selectedOS = event.target.value;
    return changeVideoFolder(selectedOS);
  };
  // Get all OS radio buttons
  osButtons = document.querySelectorAll('input[name="os"]');
// Event listener to each OS radio button
  results = [];
  for (i = 0, len = osButtons.length; i < len; i++) {
    osButton = osButtons[i];
    results.push(osButton.addEventListener('change', osChange));
  }
  return results;
})();

// --------------------------------------
timedAlert = function(title, icon, msg, milliseconds) {
  return Swal.fire({
    title: title,
    icon: icon,
    html: msg,
    timer: milliseconds,
    timerProgressBar: true,
    showConfirmButton: true
  });
};

// --------------------------------------
askConfirm = function(title, icon, msg) {
  return Swal.fire({
    title: title,
    html: msg,
    icon: icon,
    showCancelButton: true,
    confirmButtonText: 'Yes',
    cancelButtonText: 'No',
    focusCancel: true
  });
};

// --------------------------------------
getOS = function() {
  var platform;
  platform = navigator.platform;
  switch (false) {
    case !(platform.indexOf('Linux') > -1):
      return 'linux';
    case !(platform.indexOf('Mac') > -1):
      return 'macos';
    case !(platform.indexOf('Win') > -1):
      return 'windows';
    default:
      return 'unknown';
  }
};

// --------------------------------------
changeVideoFolder = function(os) {
  var videoFolder;
  videoFolder = document.getElementById('folder');
  // Change 'Download Folder' field content
  videoFolder.value = (function() {
    switch (os) {
      case 'linux':
        return '$HOME/Videos';
      case 'macos':
        return '$HOME/Movies';
      default:
        return '%USERPROFILE%\\Videos';
    }
  })();
  
  // Also change radio button to corresponding OS
  return document.querySelector(`input[name='os'][value='${os}']`).checked = true;
};

// --------------------------------------------------------------------
// 'Open folder' button click
setOpenFolderClickHandler = function() {
  var openFolderWarning;
  openFolderWarning = true; // closure variable
  return async function() {
    var cmd, videoFolder;
    videoFolder = document.getElementById('folder').value;
    cmd = (function() {
      switch (getOS()) {
        case 'linux':
          return `xdg-open "${videoFolder}" `;
        case 'macos':
          return `open "${videoFolder}" `;
        case 'windows':
          return `explorer "${videoFolder}" `;
      }
    })();
    if (openFolderWarning) {
      openFolderWarning = false;
      msg = 'The Video folder may open in the taskbar<br><br>';
      msg += 'or behind this browser window.';
      await timedAlert('Please note', '', msg, 5000);
    }
    return socket_send('run', cmd, 'OPEN FOLDER');
  };
};

document.getElementById('openfolder').onclick = setOpenFolderClickHandler();

// --------------------------------------------------------------------
// 'About' button click
document.getElementById('about').onclick = function() {
  msg = `YDownloader 1.1<br><br>
Using CoffeeScript 2.7<br><br>
Copyright \u00A9 2025 - RonLinu`;
  return showAlert('', '', msg);
};

// --------------------------------------------------------------------
// 'Help' button click
document.getElementById('help').onclick = function() {
  return showAlert('Help', '', window.HELP, 'left');
};

// --------------------------------------------------------------------
// 'Exit' button click
document.getElementById('exit').onclick = async function() {
  var result;
  result = (await askConfirm('', 'question', 'This will terminate the application.<br><br>Are you sure?'));
  if (result.isConfirmed) {
    return socket_send('exit', '', 'EXIT');
  }
};

// --------------------------------------
// 'Generate yt-dlp command' button click
document.getElementById('download').onclick = function() {
  var abbreviations, checked, checkedLanguages, final_cmd, i, index, isValidUrl, len, match, option_merging, option_resolution, option_subtitles, resolution, selectedResolution, subtitles, url, videoFolder, ytdlp_cmd;
  // Local function to check URL validity
  isValidUrl = function(string) {
    var urlObj;
    try {
      urlObj = new URL(string);
      return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
    } catch (error1) {
      return false;
    }
  };
  // ------------------------------------
  url = document.getElementById('videoUrl').value.trim();
  if (!url) {
    showAlert('', 'error', 'The Video URL field is empty.');
    return;
  } else if (!isValidUrl(url)) {
    showAlert('', 'error', 'The Video URL is invalid.');
    return;
  }
  // Remove any playlist, just download the main video
  index = url.indexOf("?list");
  if (index !== -1) {
    url = url.slice(0, index);
  }
  option_resolution = '';
  option_subtitles = '';
  option_merging = '';
  selectedResolution = document.querySelector('input[name="resolutions"]:checked').value;
  if (selectedResolution === 'No cap') {
    option_resolution = '-f best ';
  } else if (selectedResolution === 'Audio only') {
    option_resolution = '-x --audio-format mp3 ';
  } else {
    // Extract resolution number (first integer)
    match = selectedResolution.match(/^[^\d]*(\d+)/);
    resolution = match[1];
    option_resolution = '-f "bv[height<=' + resolution + ']+ba/b[height<=' + resolution + ']" ';
  }
  if (selectedResolution !== 'Audio only') {
    option_merging = '--merge-output-format mkv --remux-video mkv ';
    // Extract abbreviations of selected subtitle languages into an array
    checkedLanguages = document.querySelectorAll('input[name="language"]:checked');
    abbreviations = [];
    for (i = 0, len = checkedLanguages.length; i < len; i++) {
      checked = checkedLanguages[i];
      abbreviations.push(languages[checked.value]);
    }
    if (abbreviations.length) {
      subtitles = abbreviations.join(",");
      option_subtitles = '--write-sub --ignore-errors --write-auto-subs --sub-langs ' + subtitles + ' --embed-subs ';
    }
  }
  videoFolder = document.getElementById('folder').value.trim();
  ytdlp_cmd = 'yt-dlp ' + '--concurrent-fragments 2 ' + '--no-warnings ' + '-P "' + videoFolder + '" ' + option_resolution + option_subtitles + option_merging + '--embed-metadata ' + '--buffer-size 16M ' + '"' + url + '"';
  if (getOS() === 'windows') {
    final_cmd = `cmd /c start "" cmd /k ${ytdlp_cmd} && del /q *.vtt`;
  } else {
    final_cmd = `xterm -geometry 150x24 -e sh -c '${ytdlp_cmd}; rm '${videoFolder}/*.vtt'; echo; bash'`;
  }
  return socket_send('run', final_cmd, 'YT-DLP');
};
