// Generated by CoffeeScript 2.7.0
var WebSocket, exec, getId, launchBrowser, openBrowser, shutdown, socketport, timer, webpage, wss;

webpage = process.argv[2];

socketport = process.argv[3];

timer = true;

if (socketport === '' || webpage === '') {
  console.log('Syntax: node websocket.js <web_app_url> <socket_port>');
  process.exit(0);
}

WebSocket = require('ws'); // to install: npm install ws

({exec} = require('child_process'));

wss = new WebSocket.Server({
  port: socketport
});

wss._server.on('listening', function() {
  // code to execute when port is opened successfully
  console.log(`WebSocket server is listening on port ${socketport}`);
  setTimeout(shutdown, 5000); // client must respond within 5 sec
  return launchBrowser(getId());
});

// --------------------------------------
wss.on('error', function(err) {
  var firstline;
  if (err.code === 'EADDRINUSE') {
    console.error(`Port ${socketport} is already in use.`);
    return launchBrowser('#BUSY');
  } else {
    firstline = err.message.split('\n')[0];
    return console.error('WebSocket server error:', firstline);
  }
});

// --------------------------------------
// When a client connects
wss.on('connection', function(ws) {
  console.log('Client connected');
  timer = false; // cancel automatic shutdown
  
  // When the client disconnects
  ws.on('close', function() {
    console.log('Client disconnected');
    ws.close();
    return process.exit(0);
  });
  // When server receives a command from client
  return ws.on('message', function(message) {
    var values;
    values = JSON.parse(message);
    // Reject any command without the correct fragment identifier
    //~ if values.id isnt identifier
    //~ console.error "Incorrect identifier received"
    //~ return
    switch (values.action) {
      case 'run':
        ws.send(`${values.action},${values.tag},start`);
        console.log(`Server received: ${values.cmd}`);
        exec(values.cmd, function(error, stdout, stderr) {
          if (error) {
            return console.log(`${error}\n ${stderr}`);
          }
        });
        return ws.send(`${values.action},${values.tag},done`);
    }
  });
});

// ---------------------------------------------------------------------
openBrowser = function(url) {
  switch (process.platform) {
    case 'win32':
      return exec(`start ${url}`);
    case 'linux':
      return exec(`xdg-open '${url}'`);
    case 'darwin':
      return exec(`open '${url}'`);
    default:
      console.error('Unsupported operating system');
      return process.exit(1);
  }
};

// --------------------------------------
getId = function() {
  return `#${socketport}`;
};

// --------------------------------------
launchBrowser = function(identifier) {
  console.log(`Launching default browser at: ${webpage}`);
  return openBrowser(webpage + identifier);
};

shutdown = function() {
  if (timer) {
    console.log(`Client does not respond. Closing port ${socketport}.`);
    return process.exit(1);
  }
};
