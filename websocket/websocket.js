// Generated by CoffeeScript 2.7.0
var WebSocket, exec, identifier, openBrowser, randomHex, socketport, webpage, wss;

webpage = process.argv[2];

socketport = process.argv[3];

if (webpage === '' || socketport === '') {
  console.log('Syntax: node websocket.js <application_url> <socket_port>');
  process.exit(0);
}

WebSocket = require('ws'); // installed with: npm install ws

({exec} = require('child_process'));

wss = new WebSocket.Server({
  port: socketport
});

// --------------------------------------
wss.on('error', function(err) {
  var firstline;
  if (err.code === 'EADDRINUSE') {
    console.error(`Port ${socketport} is already in use.`);
  } else {
    firstline = err.message.split('\n')[0];
    console.error('WebSocket server error:', firstline);
  }
  return process.exit(1);
});

// --------------------------------------
// When a client connects
wss.on('connection', function(ws) {
  console.log('Client connected');
  // When the client disconnects
  ws.on('close', function() {
    return console.log('Client disconnected');
  });
  // When server receives a command from client
  return ws.on('message', function(message) {
    var values;
    values = JSON.parse(message);
    // Reject any command without the correct fragment identifier
    if (values.id !== identifier) {
      console.error("Incorrect identifier received");
      return;
    }
    switch (values.action) {
      case "exit":
        console.log('Client disconnected');
        ws.close();
        return process.exit(0);
      case "run":
        console.log(`Server received: ${values.cmd}`);
        return exec(values.cmd, function(error, stdout, stderr) {
          if (error) {
            return console.log(`${error}\n ${stderr}`);
          } else if (stdout) {
            return ws.send(stdout);
          }
        });
    }
  });
});

// ---------------------------------------------------------------------
console.log(`WebSocket server running on port: ${socketport}`);

// ----------------------------
randomHex = function() {
  return Math.floor(Math.random() * 0xFFFFFFFF).toString(16).padStart(8, '0'); // random 32-bit integer // convert to hex // ensure 8 characters
};


// ----------------------------
openBrowser = function(url) {
  switch (process.platform) {
    case 'win32':
      return exec(`start ${url}`);
    case 'linux':
      return exec(`xdg-open '${url}'`);
    case 'darwin':
      return exec(`open '${url}'`);
    default:
      console.error('Unsupported operating system');
      return process.exit(1);
  }
};

// --------------------------------------
identifier = `#${randomHex()},${socketport}`;

console.log(`Opening webpage with default browser: ${webpage}`);

openBrowser(webpage + identifier);
